apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: standby-db-template
metadata:
  name: standby-db-template
  annotations:
    openshift.io/display-name: "GCP db backup"
    tags: "standby, db"
    openshift.io/provider-display-name: "GCP db backup"
    openshift.io/documentation-url: "https://github.com/bolyachevets/business-db-sync"
parameters:
  - name: "APP_NAME"
    description: "name of app"
    required: true
  - name: "ENV"
    description: "environment"
    required: true
    required: true
  - name: "TOOLS_NS"
    description: "tools namespace hosting image stream"
    required: true
  - name: "AUTH_PROXY_CONNECT"
    description: "gcp cloud sql connection string"
    required: true
  - name: "GCP_SA_SECRET"
    description: "gcp service account key secret"
    required: true
objects:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: ${APP_NAME}-${ENV}
    labels:
      environment: ${ENV}
      name: ${APP_NAME}
      role: db
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        environment: ${ENV}
        name: ${APP_NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          environment: ${ENV}
          name: ${APP_NAME}
          role: db
      spec:
        volumes:
          - name: ${APP_NAME}-data
            persistentVolumeClaim:
              claimName: ${APP_NAME}-${ENV}
          - name: gcp-sa-key
            secret:
              secretName: ${GCP_SA_SECRET}
              defaultMode: 420
          - name: ${APP_NAME}-standby-dump
            persistentVolumeClaim:
              claimName: ${APP_NAME}-standby-dump
          - name: crontab
            configMap:
              name: ${APP_NAME}-crontab
              defaultMode: 420
        containers:
          - name: cron-server
            image: >-
              image-registry.openshift-image-registry.svc:5000/${TOOLS_NS}/postgres15-cron:latest
            imagePullPolicy: IfNotPresent
            resources: {}
            volumeMounts:
              - name: ${APP_NAME}-standby-dump
                mountPath: /data
              - name: crontab
                mountPath: /opt/app-root2/crontab
                subPath: crontab
            env:
              - name: READONLY_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: ${APP_NAME}-secret
                    key: readonly-password
              - name: PGDATABASE
                valueFrom:
                  secretKeyRef:
                    name: ${APP_NAME}-secret
                    key: database-name
              - name: PGUSER
                valueFrom:
                  secretKeyRef:
                    name: ${APP_NAME}-secret
                    key: database-user
              - name: PGPASSWORD
                valueFrom:
                  secretKeyRef:
                    name: ${APP_NAME}-secret
                    key: database-password
              - name: REPLICA_ADMIN
                valueFrom:
                  secretKeyRef:
                    name: ${APP_NAME}-secret
                    key: replica-admin
            securityContext:
              runAsNonRoot: true
            terminationMessagePath: /${ENV}/termination-log
            terminationMessagePolicy: File
          - name: cloud-sql-proxy
            image: 'gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.1.0'
            imagePullPolicy: IfNotPresent
            volumeMounts:
              - name: gcp-sa-key
                mountPath: /gcp
            args:
              - '--credentials-file=/gcp/service_account.json'
              - '--structured-logs'
              - '${AUTH_PROXY_CONNECT}'
            securityContext:
              runAsNonRoot: true
            terminationMessagePath: /${ENV}/termination-log
            terminationMessagePolicy: File
          - name: ${APP_NAME}-${ENV}
            image: >-
              registry.redhat.io/rhel9/postgresql-15:latest
            imagePullPolicy: IfNotPresent
            ports:
              - containerPort: 5432
                protocol: TCP
            env:
              - name: POSTGRESQL_DATABASE
                valueFrom:
                  secretKeyRef:
                    name: ${APP_NAME}-secret
                    key: database-name
              - name: POSTGRESQL_USER
                valueFrom:
                  secretKeyRef:
                    name: ${APP_NAME}-secret
                    key: database-user
              - name: POSTGRESQL_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: ${APP_NAME}-secret
                    key: database-password
            readinessProbe:
              exec:
                command:
                  - /bin/sh
                  - '-i'
                  - '-c'
                  - >-
                    psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
              initialDelaySeconds: 5
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            livenessProbe:
              tcpSocket:
                port: 5432
              initialDelaySeconds: 30
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            resources:
              limits:
                cpu: '1'
                memory: 2Gi
              requests:
                cpu: 100m
                memory: 512Mi
            volumeMounts:
              - name: ${APP_NAME}-data
                mountPath: /var/lib/pgsql/data
              - name: ${APP_NAME}-standby-dump
                mountPath: /data
            securityContext:
              capabilities: {}
              privileged: false
            terminationMessagePath: /${ENV}/termination-log
            terminationMessagePolicy: File
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        securityContext: {}
        schedulerName: default-scheduler
- kind: Service
  apiVersion: v1
  metadata:
    name: ${APP_NAME}-${ENV}
  spec:
    ports:
      - name: ${APP_NAME}-${ENV}
        protocol: TCP
        port: 5432
        targetPort: 5432
    internalTrafficPolicy: Cluster
    selector:
      environment: ${ENV}
      name: ${APP_NAME}
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: ${APP_NAME}-standby-dump
  spec:
    accessModes:
      - ReadWriteMany
    resources:
      requests:
        storage: 500Mi
    storageClassName: netapp-file-standard
    volumeMode: Filesystem
  status:
    phase: Bound
    accessModes:
      - ReadWriteMany
    capacity:
      storage: 500Mi
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: ${APP_NAME}-${ENV}
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: 5Gi
    storageClassName: netapp-file-standard
    volumeMode: Filesystem
  status:
    phase: Bound
    accessModes:
      - ReadWriteOnce
    capacity:
      storage: 5Gi
- kind: ConfigMap
  apiVersion: v1
  metadata:
    name: ${APP_NAME}-crontab
  data:
    crontab: |-
      #          user    command
      0 1 * * *  default /opt/app-root2/run.sh
- kind: TransportServerClaim
  apiVersion: porter.devops.gov.bc.ca/v1alpha1
  metadata:
    name: ${APP_NAME}-${ENV}-tsc
  spec:
    monitor:
      interval: 10
      timeout: 10
      type: tcp
    overrideServicePort: true
    service: ${APP_NAME}-${ENV}
    servicePort: 5432
- kind: NetworkPolicy
  apiVersion: networking.k8s.io/v1
  metadata:
    name: allow-from-f5-ingress
  spec:
    podSelector:
      matchLabels:
        name: ${APP_NAME}
    ingress:
      - from:
          - namespaceSelector:
              matchLabels:
                network.openshift.io/policy-group: ingress
    policyTypes:
      - Ingress
